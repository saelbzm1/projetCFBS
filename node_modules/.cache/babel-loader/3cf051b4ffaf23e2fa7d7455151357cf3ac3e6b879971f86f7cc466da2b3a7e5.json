{"ast":null,"code":"import { __awaiter } from '../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { Auth } from 'aws-amplify';\nimport { createAuthenticatorMachine, listenToAuthHub, defaultAuthHubHandler } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\nconst createHubHandler = options => (data, service) => __awaiter(void 0, void 0, void 0, function* () {\n  yield defaultAuthHubHandler(data, service, options);\n});\nfunction AuthenticatorProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  // `authStatus` is exposed by `useAuthenticator` but should not be derived directly from the\n  // state machine as the machine only updates on `Authenticator` initiated events, which\n  // leads to scenarios where the state machine `authStatus` gets \"stuck\". For exmample,\n  // if a user was to sign in using `Auth.signIn` directly rather than using `Authenticator`\n  const [authStatus, setAuthStatus] = React.useState('configuring');\n  // only run on first render\n  React.useEffect(() => {\n    Auth.currentAuthenticatedUser().then(() => {\n      setAuthStatus('authenticated');\n    }).catch(() => {\n      setAuthStatus('unauthenticated');\n    });\n  }, []);\n  /**\n   * Based on use cases, developer might already have added another Provider\n   * outside Authenticator. In that case, we sync the two providers by just\n   * passing the parent value.\n   *\n   * TODO(BREAKING): enforce only one provider in App tree\n   */\n  const parentProviderVal = useContext(AuthenticatorContext);\n  const service = useInterpret(createAuthenticatorMachine);\n  const value = useMemo(() => !parentProviderVal ? {\n    authStatus,\n    service\n  } : parentProviderVal, [authStatus, parentProviderVal, service]);\n  const {\n    service: activeService\n  } = value;\n  useEffect(() => {\n    const onSignIn = () => {\n      setAuthStatus('authenticated');\n    };\n    const onSignOut = () => {\n      setAuthStatus('unauthenticated');\n    };\n    const unsubscribe = listenToAuthHub(activeService, createHubHandler({\n      onSignIn,\n      onSignOut\n    }));\n    return unsubscribe;\n  }, [activeService]);\n  return React.createElement(AuthenticatorContext.Provider, {\n    value: value\n  }, children);\n}\nexport { AuthenticatorProvider as default };","map":{"version":3,"names":["__awaiter","React","useContext","useMemo","useEffect","useInterpret","Auth","createAuthenticatorMachine","listenToAuthHub","defaultAuthHubHandler","AuthenticatorContext","createHubHandler","options","data","service","AuthenticatorProvider","_ref","children","authStatus","setAuthStatus","useState","currentAuthenticatedUser","then","catch","parentProviderVal","value","activeService","onSignIn","onSignOut","unsubscribe","createElement","Provider","default"],"sources":["C:/Users/sael.bouzemarene/cfbsprojet/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs"],"sourcesContent":["import { __awaiter } from '../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { Auth } from 'aws-amplify';\nimport { createAuthenticatorMachine, listenToAuthHub, defaultAuthHubHandler } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\n\nconst createHubHandler = (options) => (data, service) => __awaiter(void 0, void 0, void 0, function* () {\n    yield defaultAuthHubHandler(data, service, options);\n});\nfunction AuthenticatorProvider({ children, }) {\n    // `authStatus` is exposed by `useAuthenticator` but should not be derived directly from the\n    // state machine as the machine only updates on `Authenticator` initiated events, which\n    // leads to scenarios where the state machine `authStatus` gets \"stuck\". For exmample,\n    // if a user was to sign in using `Auth.signIn` directly rather than using `Authenticator`\n    const [authStatus, setAuthStatus] = React.useState('configuring');\n    // only run on first render\n    React.useEffect(() => {\n        Auth.currentAuthenticatedUser()\n            .then(() => {\n            setAuthStatus('authenticated');\n        })\n            .catch(() => {\n            setAuthStatus('unauthenticated');\n        });\n    }, []);\n    /**\n     * Based on use cases, developer might already have added another Provider\n     * outside Authenticator. In that case, we sync the two providers by just\n     * passing the parent value.\n     *\n     * TODO(BREAKING): enforce only one provider in App tree\n     */\n    const parentProviderVal = useContext(AuthenticatorContext);\n    const service = useInterpret(createAuthenticatorMachine);\n    const value = useMemo(() => (!parentProviderVal ? { authStatus, service } : parentProviderVal), [authStatus, parentProviderVal, service]);\n    const { service: activeService } = value;\n    useEffect(() => {\n        const onSignIn = () => {\n            setAuthStatus('authenticated');\n        };\n        const onSignOut = () => {\n            setAuthStatus('unauthenticated');\n        };\n        const unsubscribe = listenToAuthHub(activeService, createHubHandler({ onSignIn, onSignOut }));\n        return unsubscribe;\n    }, [activeService]);\n    return (React.createElement(AuthenticatorContext.Provider, { value: value }, children));\n}\n\nexport { AuthenticatorProvider as default };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wCAAwC;AAClE,OAAOC,KAAK,IAAIC,UAAU,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAC7D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,IAAI,QAAQ,aAAa;AAClC,SAASC,0BAA0B,EAAEC,eAAe,EAAEC,qBAAqB,QAAQ,iBAAiB;AACpG,SAASC,oBAAoB,QAAQ,4BAA4B;AAEjE,MAAMC,gBAAgB,GAAIC,OAAO,IAAK,CAACC,IAAI,EAAEC,OAAO,KAAKd,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EACpG,MAAMS,qBAAqB,CAACI,IAAI,EAAEC,OAAO,EAAEF,OAAO,CAAC;AACvD,CAAC,CAAC;AACF,SAASG,qBAAqBA,CAAAC,IAAA,EAAgB;EAAA,IAAf;IAAEC;EAAU,CAAC,GAAAD,IAAA;EACxC;EACA;EACA;EACA;EACA,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGlB,KAAK,CAACmB,QAAQ,CAAC,aAAa,CAAC;EACjE;EACAnB,KAAK,CAACG,SAAS,CAAC,MAAM;IAClBE,IAAI,CAACe,wBAAwB,CAAC,CAAC,CAC1BC,IAAI,CAAC,MAAM;MACZH,aAAa,CAAC,eAAe,CAAC;IAClC,CAAC,CAAC,CACGI,KAAK,CAAC,MAAM;MACbJ,aAAa,CAAC,iBAAiB,CAAC;IACpC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMK,iBAAiB,GAAGtB,UAAU,CAACQ,oBAAoB,CAAC;EAC1D,MAAMI,OAAO,GAAGT,YAAY,CAACE,0BAA0B,CAAC;EACxD,MAAMkB,KAAK,GAAGtB,OAAO,CAAC,MAAO,CAACqB,iBAAiB,GAAG;IAAEN,UAAU;IAAEJ;EAAQ,CAAC,GAAGU,iBAAkB,EAAE,CAACN,UAAU,EAAEM,iBAAiB,EAAEV,OAAO,CAAC,CAAC;EACzI,MAAM;IAAEA,OAAO,EAAEY;EAAc,CAAC,GAAGD,KAAK;EACxCrB,SAAS,CAAC,MAAM;IACZ,MAAMuB,QAAQ,GAAGA,CAAA,KAAM;MACnBR,aAAa,CAAC,eAAe,CAAC;IAClC,CAAC;IACD,MAAMS,SAAS,GAAGA,CAAA,KAAM;MACpBT,aAAa,CAAC,iBAAiB,CAAC;IACpC,CAAC;IACD,MAAMU,WAAW,GAAGrB,eAAe,CAACkB,aAAa,EAAEf,gBAAgB,CAAC;MAAEgB,QAAQ;MAAEC;IAAU,CAAC,CAAC,CAAC;IAC7F,OAAOC,WAAW;EACtB,CAAC,EAAE,CAACH,aAAa,CAAC,CAAC;EACnB,OAAQzB,KAAK,CAAC6B,aAAa,CAACpB,oBAAoB,CAACqB,QAAQ,EAAE;IAAEN,KAAK,EAAEA;EAAM,CAAC,EAAER,QAAQ,CAAC;AAC1F;AAEA,SAASF,qBAAqB,IAAIiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}